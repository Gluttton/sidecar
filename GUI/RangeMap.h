#ifndef SIDECAR_GUI_RANGEMAP_H // -*- C++ -*-
#define SIDECAR_GUI_RANGEMAP_H

#include "QtCore/QObject"

#include "GUI/Vertex.h"

namespace SideCar {
namespace GUI {

/** Set of points that define lines that make up a range map. Supports rendering of the lines into an OpenGL
    buffer via the render() method (line color, thickness, etc. should be already at the time render() is
    called).

    The first time render() method runs, it invokes regenerateMap() to build
    the set of line vertices. Derived classes may override regenerateMap() to
    receive notification that the map is being generated, and they will
    probably override addVertex() to change the vertex data before it is added
    to the map's line point vector.
*/
class RangeMap : public QObject {
    Q_OBJECT
public:
    /** Structure of the raw point data in latitude/longitude.
     */
    struct LatLon {
        double lat;
        double lon;
    };

    /** Constructor.
     */
    RangeMap();

    /** Destructor.
     */
    virtual ~RangeMap() {}

    /** Begin a OpenGL GL_LINE_STRIP and fill it with vertices generated by regenerateMap(). Invokes
        regenerateMap() if there are no vertices. The OpenGL drawing environment must already be setup when
        render() is called.
    */
    void render();

    void clearMap() { vertices_.clear(); }

protected:
    /** Create the vertices for the map by calling makeVertex() on each of the elements in the internal
        latitude/longitude map data. Invokes makeVertex() followed by addVertex().
    */
    virtual void generateMap();

    /** Add a vertex to the cache.

        \param vertex the Vertex object to add.
    */
    virtual void addVertex(const Vertex& vertex);

    /** Determine if there is any data in the vertex cache.

        \return true if so
    */
    bool empty() const { return vertices_.empty(); }

private:
    /** Convert a latitude/longitude value into real-world x, y coordinates, with 0, 0 being the radar center.

        \param latLon value to convert

        \param vertex Vertex object to hold the converted values
    */
    void makeVertex(const LatLon& latLon, Vertex& vertex);

    VertexVector vertices_;

    static const RangeMap::LatLon map_[];
};

} // end namespace GUI
} // end namespace SideCar

#endif
