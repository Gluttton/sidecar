#ifndef SIDECAR_GUI_RADARINFOWIDGET_H // -*- C++ -*-
#define SIDECAR_GUI_RADARINFOWIDGET_H

#include "QtCore/QBasicTimer"
#include "QtGui/QWidget"

#include "Messages/PRIMessage.h"

namespace Logger {
class Log;
}

namespace Ui {
class RadarInfoWidget;
}
namespace SideCar {
namespace Time {
class TimeStamp;
}
namespace GUI {

class AppBase;

/** QToolBar widget that shows the azimuth and message time of the last message processed by the application.
    Updates to the widget come from the showMessageInfo() slot.

    This class performs a lot of data caching in order to minimize the time spent in showMessageInfo(), and to speed up
    widget updates. Within showMessageInfo(), the class takes in the raw data, and sets various boolean flags if the
    raw data is different than what was seen before. An internal timer periodically checks the boolean flags to see if
    the widget needs an update. If so, the makeLabel() routine will rebuild a QString value for the widget's label
    text. The RadarInfoWidget class keesp around the individual QString objects associated with raw values so that they
    only get regenerated by raw value changes.
*/
class RadarInfoWidget : public QWidget {
    Q_OBJECT
    using Super = QWidget;

public:
    static Logger::Log& Log();

    /** Constructor. Creates and initializes window widgets.
     */
    RadarInfoWidget(QWidget* parent = 0);

public slots:

    /** Post the current system clock time.
     */
    virtual void showMessageInfo(const Messages::PRIMessage::Ref& msg);

    virtual void refreshTime();

    virtual void refreshAzimuth();

    virtual void refresh();

protected:
    virtual bool needUpdate() const;

    virtual QString makeLabel();

private:
    void timerEvent(QTimerEvent* event);

    Ui::RadarInfoWidget* gui_;
    const AppBase* app_;
    QBasicTimer updateTimer_;
    double irigTime_;
    Time::TimeStamp createdTime_;
    QString timeText_;
    double azimuth_;
    QString azimuthText_;
    bool hasIRIGTime_;
    bool updateTime_;
    bool updateAzimuth_;

    static const int kUpdateInterval;
};

} // end namespace GUI
} // end namespace SideCar

/** \file
 */

#endif
